openapi: "3.0.3"

info:
  title: '{{index . "info.Title"}}'
  description: '{{index . "info.Description"}}'
  contact:
    name: '{{index . "info.Contact.Name"}}'
    url: '{{index . "info.Contact.URL"}}'
    email: '{{index . "info.Contact.Email"}}'
  license:
    name: '{{index . "info.License.Name"}}'
    url: '{{index . "info.License.URL"}}'
  version: '{{index . "info.Version"}}'

servers:
  - url: "{scheme}://{host}"
    description: Server
    variables:
      scheme:
        description: The API is accessible via https and http
        enum:
          - https
          - http
        default: http
      host:
        default: '{{index . "server.URL.Host.Default"}}'

tags:
  - name: Systems
    description: >-
      [Generic (sub)Domain] Systems
  - name: Auths
    description: >-
      [Generic (sub)Domain] Authentication (using DDD layered architecture, [G]ORM)
security:
  - bearerAuth: []

paths:
  # System
  /system/health:
    get:
      tags:
        - Systems
      security: []
      operationId: Systems.CheckHealth
      summary: System Health Check
      responses:
        default:
          $ref: "#/components/responses/GeneralResponse"
  /system/captcha/generate:
    get:
      tags:
        - Systems
      security: []
      operationId: Systems.Captcha.Generate
      summary: System Generate Captcha
      responses:
        default:
          $ref: "#/components/responses/GeneralResponse"
  /system/captcha/image/{captchaID}:
    get:
      tags:
        - Systems
      security: []
      operationId: Systems.Captcha.GenerateImage
      summary: System Generate Captcha Image
      parameters:
        - $ref: "#/components/parameters/system.param.captchaID"
      responses:
        default:
          $ref: "#/components/responses/GeneralResponse"

  # Auths
  /api/v1/auths/register:
    post:
      tags:
        - Auths
      security: []
      operationId: Auths.Register
      summary: User Registration
      requestBody:
        $ref: "#/components/requestBodies/auths.Register.Request"
      responses:
        default:
          $ref: "#/components/responses/GeneralResponse"

  /api/v1/auths/registration/activate/{activationCode}/{format}:
    get:
      tags:
        - Auths
      security: []
      operationId: Auths.ActivateRegistration
      summary: Activate Registration
      parameters:
        - $ref: "#/components/parameters/auths.param.regActivationCode"
        - $ref: "#/components/parameters/auths.param.reqActivationFormat"
      responses:
        default:
          $ref: "#/components/responses/GeneralResponse"

  /api/v1/auths/login:
    post:
      tags:
        - Auths
      security: []
      operationId: Auths.Login
      summary: User Login (local user)
      requestBody:
        $ref: "#/components/requestBodies/auths.Login.Request"
      responses:
        default:
          $ref: "#/components/responses/GeneralResponse"

  /api/v1/auths/login-app:
    post:
      tags:
        - Auths
      security: []
      operationId: Auths.LoginApp
      summary: Client Login App (local user)
      requestBody:
        $ref: "#/components/requestBodies/auths.LoginApp.Request"
      responses:
        default:
          $ref: "#/components/responses/GeneralResponse"

components:
  #SecuritySchemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Parameters
  parameters:
    # System
    system.param.captchaID:
      in: path
      name: captchaID
      description: >-
        captchaID (with extension: `.png`)
      schema:
        type: string
      required: true
      example: mv14bg7coWkbp9JtnQCb.png

    # Auths
    auths.param.regActivationCode:
      in: path
      name: activationCode
      description: >-
        Activation Code (from register process)
      schema:
        type: string
      required: true
      example: "adhad-adlkajdandad-aldkjadjal-adkad"

    auths.param.reqActivationFormat:
      in: path
      name: format
      description: >-
        Dispay Format
      schema:
        type: string
        enum:
          - json
          - html
        default: json
      required: true

    # GeoLocation
    geoLocation.param.countryCode:
      in: path
      name: code
      description: >-
        Country Code (example: ID)
      schema:
        type: string
      required: true
      example: ID

    # Emails
    email.param.emailTemplateCode:
      in: path
      name: code
      description: >-
        Email Template Code
      schema:
        type: string
      required: true
      example: activate-registration

  # Request Bodies
  requestBodies:
    # Auths
    auths.Register.Request:
      description: User Registration
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/auths.Register.Request"
          examples:
            Registration:
              value:
                username: "admin.d3tago"
                password: "P4s$W0rd!@!"
                email: "user.d3tago@email.tld"
                nickName: "Hari"
                captcha: "get-captcha/Value"
                captchaID: "get-geptcha/ID"

    auths.Login.Request:
      description: User Login
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/auths.Login.Request"
          examples:
            Registration:
              value:
                username: "admin.d3tago"
                password: "P4s$W0rd!@!"
                captcha: "get-captcha/Value"
                captchaID: "get-geptcha/ID"

    auths.LoginApp.Request:
      description: Client Login App
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/auths.LoginApp.Request"
          examples:
            Registration:
              value:
                clientKey: "clientKey"
                secretKey: "secretkey"

  responses:
    GeneralResponse:
      description: General Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralResponse"

  # Schemas
  schemas:
    GeneralResponse:
      required:
        - status
        - response
        - serverInfo
      properties:
        status:
          type: string
          enum:
            - OK
            - ERROR
          example: OK
        response:
          type: object
        serverInfo:
          type: object

    # Auths
    auths.Register.Request:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/auths.field.username"
        password:
          $ref: "#/components/schemas/auths.field.password"
        email:
          $ref: "#/components/schemas/auths.field.email"
        nickName:
          $ref: "#/components/schemas/auths.field.nickName"
        captcha:
          $ref: "#/components/schemas/auths.field.captcha"
        captchaID:
          $ref: "#/components/schemas/auths.field.captchaID"

    auths.Login.Request:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/auths.field.username"
        password:
          $ref: "#/components/schemas/auths.field.password"
        captcha:
          $ref: "#/components/schemas/auths.field.captcha"
        captchaID:
          $ref: "#/components/schemas/auths.field.captchaID"

    auths.LoginApp.Request:
      type: object
      properties:
        clientKey:
          $ref: "#/components/schemas/auths.field.clientKey"
        secretKey:
          $ref: "#/components/schemas/auths.field.secretKey"

    auths.field.username:
      type: string
      example: "user.d3tago"
    auths.field.password:
      type: string
      example: "P4s$W0rd!@!"
    auths.field.email:
      type: string
      format: email
      example: "user.d3tago@email.tld"
    auths.field.nickName:
      type: string
      example: "Hari"

    auths.field.captcha:
      type: string
      example: 1234
    auths.field.captchaID:
      type: string
      example: "adao293aoadh39uekha"

    auths.field.clientKey:
      type: string
      example: "clientKey"
    auths.field.secretKey:
      type: string
      example: "clientKey"
